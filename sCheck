#!/usr/bin/env python
from OpenSSL import crypto
from OpenSSL import SSL
import datetime
import socket
import sys
purpureText = '\033[95m\033[1m'
greenText = '\033[92m\033[1m'
redText = '\033[91m\033[1m'
orangeText = '\033[93m\033[1m'
endColor = '\033[0m'

IsInputIpAdress = False
if len(sys.argv) == 2:
	hostName = sys.argv[-1]
elif len(sys.argv) == 3:
	hostName = sys.argv[-2]
	inputIpAdress = sys.argv[-1]
	IsInputIpAdress = True
else:
	print redText + "Incorrect script call." + greenText + "\nUse the following call method:" + endColor
	print greenText + "sCheck" + endColor + " HostName" + purpureText + " [ipAddress]" + endColor
	sys.exit()

hostName = hostName.lower()
if hostName[:7] == "http://" : hostName = hostName[7:]
elif hostName[:8] == "https://" : hostName = hostName[8:]
if hostName.find('/') != -1:
	hostName = hostName[:hostName.find('/')]
hostNameIdna = hostName.decode('utf-8').encode("idna")

isHostNameResolve = True
try:
	ipAddress = socket.gethostbyname(hostNameIdna)#IP
except socket.error:
	if IsInputIpAdress: #HostName do not resolve, but IPAdres was was specified
		ipAddress = inputIpAdress
		isHostNameResolve = False
	else:
		print redText + "HostName do not resolve and You did not specify an IP address" + endColor 
		sys.exit()

print "------------------"
try:
	sock = socket.socket()
	if IsInputIpAdress:
		sock.connect((inputIpAdress, 443))
	else:
		sock.connect((ipAddress, 443))
	peername = sock.getpeername()
	ctx = SSL.Context(SSL.SSLv23_METHOD)
#	ctx.check_hostname = False
#	ctx.verify_mode = SSL.VERIFY_NONE

	sock_ssl = SSL.Connection(ctx, sock)
	sock_ssl.set_connect_state()
	sock_ssl.set_tlsext_host_name(hostNameIdna)
	sock_ssl.do_handshake()
	x509 = sock_ssl.get_peer_certificate()
	sock_ssl.close()
	sock.close()
except socket.error:
	print redText + "Error while executing the script." + greenText + " \nPossible causes: " + endColor
	print "* HostName not added on node\n* HostName do not resolve\n* 433 socket is closed!"
	sys.exit()

for i in range(x509.get_extension_count()):
	ext = x509.get_extension(i)
	if ext.get_short_name() == "subjectAltName":#SANs
		sans = ext.__str__().split("DNS:")
		if sans[0] == "":del sans[0]
		for j in range(len(sans)):
			sans[j] = sans[j].strip()
			if sans[j][-1] == ",":
				sans[j] = sans[j][:-1]

issuer = x509.get_issuer().commonName #Issuer

From = x509.get_notBefore()
To = x509.get_notAfter()
ValidFrom = datetime.date(int(From[:4]), int(From[4:6]),int(From[6:8]))
ValidTo = datetime.date(int(To[:4]), int(To[4:6]),int(To[6:8]))
today = datetime.date.today()
days = int(str(ValidTo-today).split()[0]) #expire in x days

if isHostNameResolve:
	print purpureText + hostName + greenText + ' resolve to '+ orangeText + ipAddress + endColor
else: 
	print purpureText + hostName + redText + ' do not resolve ' + endColor

if not(IsInputIpAdress):
	print purpureText + "Certificate was read from server: " + orangeText + ipAddress + endColor
else:
	print purpureText + "Certificate was read from server: " + orangeText + inputIpAdress + endColor
print "------------------"

if (hostNameIdna in sans) or ("*" + hostNameIdna[hostNameIdna.find('.'):] in sans):
	print greenText + "Hostname " + purpureText + hostName + greenText + " is correctly listed in the certificate." + endColor
else:
	print redText + "Hostname " + purpureText + hostName + redText + " is incorrectly listed in the certificate." + endColor

print orangeText + "Valid From :" + endColor , ValidFrom
print orangeText + "Valid To :" + endColor , ValidTo

if days > 0: 
	print greenText + "Certificate will expire in"  + purpureText , days , greenText + "days." + endColor
else:
	print redText + "Certificate has expired" + purpureText ,  days , redText + "days before." + endColor

if issuer:
	if x509.get_issuer().commonName != x509.get_subject().commonName:
		print greenText + "Certificate was issued by:\n    " + endColor + issuer
	else:
		print redText + "Certificate is self-signed: \n    " + endColor + issuer

if hostNameIdna != hostName :
	print greenText + "PunyCode hostname:" + endColor, hostNameIdna

print orangeText + "Subject:\n   " + endColor , x509.get_subject().commonName

print orangeText + "Subject alternative names:" + endColor + "\n   ",
j = 0
for i in range(len(sans)):
	print sans[i]+";" ,
	j += 1
	if j > 3:
		j = 0 
		print '\n   ',
	if i == len(sans)-1 and j != 0: print 

print orangeText + "SSLShopper Link : \n    " + endColor + "https://www.sslshopper.com/ssl-checker.html#hostname=" + hostNameIdna

print "------------------"
